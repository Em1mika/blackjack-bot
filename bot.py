from aiogram import Bot, Dispatcher, types, executor from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton import logging import random import datetime

API_TOKEN = '7689697850:AAFeDtgekHM6bsOT7B0A1rdsaTRCcp59VqY' ADMIN_TG_ID = '5520224616'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN) dp = Dispatcher(bot)

–ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–æ–≤

user_balances = {} user_last_claim = {}

–ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞

cards = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']

def draw_card(): return random.choice(cards)

def card_value(card): if card in ['J', 'Q', 'K']: return 10 elif card == 'A': return 11 return int(card)

def total(hand): result = sum(card_value(card) for card in hand) aces = hand.count('A') while result > 21 and aces: result -= 10 aces -= 1 return result

@dp.message_handler(commands=['start']) async def start_game(message: types.Message): user_id = message.from_user.id user_balances.setdefault(user_id, 100)

today = datetime.date.today()
last_claim = user_last_claim.get(user_id)
if last_claim != today:
    user_balances[user_id] += 10
    user_last_claim[user_id] = today
    await message.answer("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: +10 –º–æ–Ω–µ—Ç!")

kb = InlineKeyboardMarkup()
kb.add(InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ –ë–ª—ç–∫–¥–∂–µ–∫", callback_data="play"))
kb.add(InlineKeyboardButton("üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", callback_data="donate"))
await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Blackjack –ë–æ—Ç–∞! üÉè", reply_markup=kb)

@dp.message_handler(commands=['balance']) async def check_balance(message: types.Message): balance = user_balances.get(message.from_user.id, 100) await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç")

@dp.callback_query_handler(lambda c: True) async def handle_buttons(callback_query: types.CallbackQuery): user_id = callback_query.from_user.id data = callback_query.data

if data == "play":
    user_balances.setdefault(user_id, 100)
    if user_balances[user_id] < 10:
        await callback_query.message.edit_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ú–∏–Ω–∏–º—É–º 10 –º–æ–Ω–µ—Ç.")
        return

    player_hand = [draw_card(), draw_card()]
    dealer_hand = [draw_card()]
    total_player = total(player_hand)
    text = f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {player_hand} (—Å—É–º–º–∞: {total_player})\n"
    text += f"–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {dealer_hand}"

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data=f"hit|{','.join(player_hand)}|{dealer_hand[0]}"))
    kb.add(InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç", callback_data=f"stand|{','.join(player_hand)}|{dealer_hand[0]}"))
    await callback_query.message.edit_text(text, reply_markup=kb)

elif data.startswith("hit") or data.startswith("stand"):
    parts = data.split("|")
    action = parts[0]
    player_hand = parts[1].split(",")
    dealer_hand = [parts[2]]

    if action == "hit":
        player_hand.append(draw_card())
        player_total = total(player_hand)
        if player_total > 21:
            user_balances[user_id] -= 10
            await callback_query.message.edit_text(
                f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {player_hand} ({player_total}).\n–ë–∞–ª–∞–Ω—Å: {user_balances[user_id]}")
            return
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–í–∑—è—Ç—å –µ—â—ë", callback_data=f"hit|{','.join(player_hand)}|{dealer_hand[0]}"))
        kb.add(InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç", callback_data=f"stand|{','.join(player_hand)}|{dealer_hand[0]}"))
        await callback_query.message.edit_text(
            f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {player_hand} ({player_total})\n–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {dealer_hand}", reply_markup=kb)

    elif action == "stand":
        while total(dealer_hand) < 17:
            dealer_hand.append(draw_card())
        dealer_total = total(dealer_hand)
        player_total = total(player_hand)

        result_text = f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {player_hand} ({player_total})\n–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {dealer_hand} ({dealer_total})\n"
        if dealer_total > 21 or player_total > dealer_total:
            user_balances[user_id] += 10
            result_text += "–¢—ã –≤—ã–∏–≥—Ä–∞–ª! üí∞ +10 –º–æ–Ω–µ—Ç"
        elif player_total < dealer_total:
            user_balances[user_id] -= 10
            result_text += "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. üò¢ -10 –º–æ–Ω–µ—Ç"
        else:
            result_text += "–ù–∏—á—å—è. üòê"
        result_text += f"\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balances[user_id]}"
        await callback_query.message.edit_text(result_text)

elif data == "donate":
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ TON", url=f"https://t.me/crypto?start=send-{ADMIN_TG_ID}"))
    await callback_query.message.edit_text("–ü–æ–¥–¥–µ—Ä–∂–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ TON:", reply_markup=kb)

if name == 'main': executor.start_polling(dp, skip_updates=True)
